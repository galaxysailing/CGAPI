Terminals unused in grammar

   LEFT_BRACE
   RIGHT_BRACE
   DOT
   FLOATCONSTANT


Grammar

    0 $accept: root $end

    1 root: translation_unit

    2 translation_unit: glsl_code
    3                 | translation_unit glsl_code

    4 glsl_code: decl_expression
    5          | def_function

    6 decl_expression: function_prototype SEMICOLON
    7                | full_type variable_name SEMICOLON

    8 def_function: function_prototype compound_statement

    9 function_prototype: function_header RIGHT_PAREN
   10                   | function_header params_list RIGHT_PAREN

   11 function_header: full_type function_name LEFT_PAREN

   12 params_list: parameter_declaration
   13            | params_list COMMA parameter_declaration

   14 parameter_declaration: type_specifier variable_name
   15                      | type_specifier

   16 compound_statement: FUNCTION_CODE_BODY

   17 full_type: type_specifier
   18          | type_descriptors_list type_specifier

   19 type_specifier: VOID
   20               | FLOAT
   21               | DOUBLE
   22               | INT
   23               | BOOL
   24               | MAT4
   25               | MAT3
   26               | MAT2
   27               | VEC4
   28               | VEC3
   29               | VEC2
   30               | SAMPLER2D

   31 type_descriptors_list: type_descriptor
   32                      | type_descriptors_list type_descriptor

   33 type_descriptor: io_decl
   34                | layout_decl

   35 io_decl: IN
   36        | OUT
   37        | UNIFORM

   38 layout_decl: LAYOUT LEFT_PAREN LOC EQ layout_val RIGHT_PAREN

   39 variable_name: IDENTIFIER

   40 function_name: IDENTIFIER

   41 layout_val: INTCONSTANT


Terminals, with rules where they appear

$end (0) 0
error (256)
IN (258) 35
OUT (259) 36
LAYOUT (260) 38
LOC (261) 38
UNIFORM (262) 37
MAT4 (263) 24
MAT3 (264) 25
MAT2 (265) 26
VEC4 (266) 27
VEC3 (267) 28
VEC2 (268) 29
SAMPLER2D (269) 30
LEFT_PAREN (270) 11 38
RIGHT_PAREN (271) 9 10 38
LEFT_BRACE (272)
RIGHT_BRACE (273)
EQ (274) 38
SEMICOLON (275) 6 7
DOT (276)
COMMA (277) 13
FLOAT (278) 20
DOUBLE (279) 21
INT (280) 22
VOID (281) 19
BOOL (282) 23
IDENTIFIER (283) 39 40
INTCONSTANT (284) 41
FLOATCONSTANT (285)
FUNCTION_CODE_BODY (286) 16


Nonterminals, with rules where they appear

$accept (32)
    on left: 0
root (33)
    on left: 1, on right: 0
translation_unit (34)
    on left: 2 3, on right: 1 3
glsl_code (35)
    on left: 4 5, on right: 2 3
decl_expression (36)
    on left: 6 7, on right: 4
def_function (37)
    on left: 8, on right: 5
function_prototype (38)
    on left: 9 10, on right: 6 8
function_header (39)
    on left: 11, on right: 9 10
params_list (40)
    on left: 12 13, on right: 10 13
parameter_declaration (41)
    on left: 14 15, on right: 12 13
compound_statement (42)
    on left: 16, on right: 8
full_type (43)
    on left: 17 18, on right: 7 11
type_specifier (44)
    on left: 19 20 21 22 23 24 25 26 27 28 29 30, on right: 14 15 17
    18
type_descriptors_list (45)
    on left: 31 32, on right: 18 32
type_descriptor (46)
    on left: 33 34, on right: 31 32
io_decl (47)
    on left: 35 36 37, on right: 33
layout_decl (48)
    on left: 38, on right: 34
variable_name (49)
    on left: 39, on right: 7 14
function_name (50)
    on left: 40, on right: 11
layout_val (51)
    on left: 41, on right: 38


state 0

    0 $accept: . root $end

    IN         shift, and go to state 1
    OUT        shift, and go to state 2
    LAYOUT     shift, and go to state 3
    UNIFORM    shift, and go to state 4
    MAT4       shift, and go to state 5
    MAT3       shift, and go to state 6
    MAT2       shift, and go to state 7
    VEC4       shift, and go to state 8
    VEC3       shift, and go to state 9
    VEC2       shift, and go to state 10
    SAMPLER2D  shift, and go to state 11
    FLOAT      shift, and go to state 12
    DOUBLE     shift, and go to state 13
    INT        shift, and go to state 14
    VOID       shift, and go to state 15
    BOOL       shift, and go to state 16

    root                   go to state 17
    translation_unit       go to state 18
    glsl_code              go to state 19
    decl_expression        go to state 20
    def_function           go to state 21
    function_prototype     go to state 22
    function_header        go to state 23
    full_type              go to state 24
    type_specifier         go to state 25
    type_descriptors_list  go to state 26
    type_descriptor        go to state 27
    io_decl                go to state 28
    layout_decl            go to state 29


state 1

   35 io_decl: IN .

    $default  reduce using rule 35 (io_decl)


state 2

   36 io_decl: OUT .

    $default  reduce using rule 36 (io_decl)


state 3

   38 layout_decl: LAYOUT . LEFT_PAREN LOC EQ layout_val RIGHT_PAREN

    LEFT_PAREN  shift, and go to state 30


state 4

   37 io_decl: UNIFORM .

    $default  reduce using rule 37 (io_decl)


state 5

   24 type_specifier: MAT4 .

    $default  reduce using rule 24 (type_specifier)


state 6

   25 type_specifier: MAT3 .

    $default  reduce using rule 25 (type_specifier)


state 7

   26 type_specifier: MAT2 .

    $default  reduce using rule 26 (type_specifier)


state 8

   27 type_specifier: VEC4 .

    $default  reduce using rule 27 (type_specifier)


state 9

   28 type_specifier: VEC3 .

    $default  reduce using rule 28 (type_specifier)


state 10

   29 type_specifier: VEC2 .

    $default  reduce using rule 29 (type_specifier)


state 11

   30 type_specifier: SAMPLER2D .

    $default  reduce using rule 30 (type_specifier)


state 12

   20 type_specifier: FLOAT .

    $default  reduce using rule 20 (type_specifier)


state 13

   21 type_specifier: DOUBLE .

    $default  reduce using rule 21 (type_specifier)


state 14

   22 type_specifier: INT .

    $default  reduce using rule 22 (type_specifier)


state 15

   19 type_specifier: VOID .

    $default  reduce using rule 19 (type_specifier)


state 16

   23 type_specifier: BOOL .

    $default  reduce using rule 23 (type_specifier)


state 17

    0 $accept: root . $end

    $end  shift, and go to state 31


state 18

    1 root: translation_unit .
    3 translation_unit: translation_unit . glsl_code

    IN         shift, and go to state 1
    OUT        shift, and go to state 2
    LAYOUT     shift, and go to state 3
    UNIFORM    shift, and go to state 4
    MAT4       shift, and go to state 5
    MAT3       shift, and go to state 6
    MAT2       shift, and go to state 7
    VEC4       shift, and go to state 8
    VEC3       shift, and go to state 9
    VEC2       shift, and go to state 10
    SAMPLER2D  shift, and go to state 11
    FLOAT      shift, and go to state 12
    DOUBLE     shift, and go to state 13
    INT        shift, and go to state 14
    VOID       shift, and go to state 15
    BOOL       shift, and go to state 16

    $default  reduce using rule 1 (root)

    glsl_code              go to state 32
    decl_expression        go to state 20
    def_function           go to state 21
    function_prototype     go to state 22
    function_header        go to state 23
    full_type              go to state 24
    type_specifier         go to state 25
    type_descriptors_list  go to state 26
    type_descriptor        go to state 27
    io_decl                go to state 28
    layout_decl            go to state 29


state 19

    2 translation_unit: glsl_code .

    $default  reduce using rule 2 (translation_unit)


state 20

    4 glsl_code: decl_expression .

    $default  reduce using rule 4 (glsl_code)


state 21

    5 glsl_code: def_function .

    $default  reduce using rule 5 (glsl_code)


state 22

    6 decl_expression: function_prototype . SEMICOLON
    8 def_function: function_prototype . compound_statement

    SEMICOLON           shift, and go to state 33
    FUNCTION_CODE_BODY  shift, and go to state 34

    compound_statement  go to state 35


state 23

    9 function_prototype: function_header . RIGHT_PAREN
   10                   | function_header . params_list RIGHT_PAREN

    MAT4         shift, and go to state 5
    MAT3         shift, and go to state 6
    MAT2         shift, and go to state 7
    VEC4         shift, and go to state 8
    VEC3         shift, and go to state 9
    VEC2         shift, and go to state 10
    SAMPLER2D    shift, and go to state 11
    RIGHT_PAREN  shift, and go to state 36
    FLOAT        shift, and go to state 12
    DOUBLE       shift, and go to state 13
    INT          shift, and go to state 14
    VOID         shift, and go to state 15
    BOOL         shift, and go to state 16

    params_list            go to state 37
    parameter_declaration  go to state 38
    type_specifier         go to state 39


state 24

    7 decl_expression: full_type . variable_name SEMICOLON
   11 function_header: full_type . function_name LEFT_PAREN

    IDENTIFIER  shift, and go to state 40

    variable_name  go to state 41
    function_name  go to state 42


state 25

   17 full_type: type_specifier .

    $default  reduce using rule 17 (full_type)


state 26

   18 full_type: type_descriptors_list . type_specifier
   32 type_descriptors_list: type_descriptors_list . type_descriptor

    IN         shift, and go to state 1
    OUT        shift, and go to state 2
    LAYOUT     shift, and go to state 3
    UNIFORM    shift, and go to state 4
    MAT4       shift, and go to state 5
    MAT3       shift, and go to state 6
    MAT2       shift, and go to state 7
    VEC4       shift, and go to state 8
    VEC3       shift, and go to state 9
    VEC2       shift, and go to state 10
    SAMPLER2D  shift, and go to state 11
    FLOAT      shift, and go to state 12
    DOUBLE     shift, and go to state 13
    INT        shift, and go to state 14
    VOID       shift, and go to state 15
    BOOL       shift, and go to state 16

    type_specifier   go to state 43
    type_descriptor  go to state 44
    io_decl          go to state 28
    layout_decl      go to state 29


state 27

   31 type_descriptors_list: type_descriptor .

    $default  reduce using rule 31 (type_descriptors_list)


state 28

   33 type_descriptor: io_decl .

    $default  reduce using rule 33 (type_descriptor)


state 29

   34 type_descriptor: layout_decl .

    $default  reduce using rule 34 (type_descriptor)


state 30

   38 layout_decl: LAYOUT LEFT_PAREN . LOC EQ layout_val RIGHT_PAREN

    LOC  shift, and go to state 45


state 31

    0 $accept: root $end .

    $default  accept


state 32

    3 translation_unit: translation_unit glsl_code .

    $default  reduce using rule 3 (translation_unit)


state 33

    6 decl_expression: function_prototype SEMICOLON .

    $default  reduce using rule 6 (decl_expression)


state 34

   16 compound_statement: FUNCTION_CODE_BODY .

    $default  reduce using rule 16 (compound_statement)


state 35

    8 def_function: function_prototype compound_statement .

    $default  reduce using rule 8 (def_function)


state 36

    9 function_prototype: function_header RIGHT_PAREN .

    $default  reduce using rule 9 (function_prototype)


state 37

   10 function_prototype: function_header params_list . RIGHT_PAREN
   13 params_list: params_list . COMMA parameter_declaration

    RIGHT_PAREN  shift, and go to state 46
    COMMA        shift, and go to state 47


state 38

   12 params_list: parameter_declaration .

    $default  reduce using rule 12 (params_list)


state 39

   14 parameter_declaration: type_specifier . variable_name
   15                      | type_specifier .

    IDENTIFIER  shift, and go to state 48

    $default  reduce using rule 15 (parameter_declaration)

    variable_name  go to state 49


state 40

   39 variable_name: IDENTIFIER .
   40 function_name: IDENTIFIER .

    LEFT_PAREN  reduce using rule 40 (function_name)
    $default    reduce using rule 39 (variable_name)


state 41

    7 decl_expression: full_type variable_name . SEMICOLON

    SEMICOLON  shift, and go to state 50


state 42

   11 function_header: full_type function_name . LEFT_PAREN

    LEFT_PAREN  shift, and go to state 51


state 43

   18 full_type: type_descriptors_list type_specifier .

    $default  reduce using rule 18 (full_type)


state 44

   32 type_descriptors_list: type_descriptors_list type_descriptor .

    $default  reduce using rule 32 (type_descriptors_list)


state 45

   38 layout_decl: LAYOUT LEFT_PAREN LOC . EQ layout_val RIGHT_PAREN

    EQ  shift, and go to state 52


state 46

   10 function_prototype: function_header params_list RIGHT_PAREN .

    $default  reduce using rule 10 (function_prototype)


state 47

   13 params_list: params_list COMMA . parameter_declaration

    MAT4       shift, and go to state 5
    MAT3       shift, and go to state 6
    MAT2       shift, and go to state 7
    VEC4       shift, and go to state 8
    VEC3       shift, and go to state 9
    VEC2       shift, and go to state 10
    SAMPLER2D  shift, and go to state 11
    FLOAT      shift, and go to state 12
    DOUBLE     shift, and go to state 13
    INT        shift, and go to state 14
    VOID       shift, and go to state 15
    BOOL       shift, and go to state 16

    parameter_declaration  go to state 53
    type_specifier         go to state 39


state 48

   39 variable_name: IDENTIFIER .

    $default  reduce using rule 39 (variable_name)


state 49

   14 parameter_declaration: type_specifier variable_name .

    $default  reduce using rule 14 (parameter_declaration)


state 50

    7 decl_expression: full_type variable_name SEMICOLON .

    $default  reduce using rule 7 (decl_expression)


state 51

   11 function_header: full_type function_name LEFT_PAREN .

    $default  reduce using rule 11 (function_header)


state 52

   38 layout_decl: LAYOUT LEFT_PAREN LOC EQ . layout_val RIGHT_PAREN

    INTCONSTANT  shift, and go to state 54

    layout_val  go to state 55


state 53

   13 params_list: params_list COMMA parameter_declaration .

    $default  reduce using rule 13 (params_list)


state 54

   41 layout_val: INTCONSTANT .

    $default  reduce using rule 41 (layout_val)


state 55

   38 layout_decl: LAYOUT LEFT_PAREN LOC EQ layout_val . RIGHT_PAREN

    RIGHT_PAREN  shift, and go to state 56


state 56

   38 layout_decl: LAYOUT LEFT_PAREN LOC EQ layout_val RIGHT_PAREN .

    $default  reduce using rule 38 (layout_decl)
